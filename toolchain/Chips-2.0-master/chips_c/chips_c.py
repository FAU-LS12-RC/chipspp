# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_chips_c', [dirname(__file__)])
        except ImportError:
            import _chips_c
            return _chips_c
        if fp is not None:
            try:
                _mod = imp.load_module('_chips_c', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _chips_c = swig_import_helper()
    del swig_import_helper
else:
    import _chips_c
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hi"] = _chips_c.pair_hi_set
    __swig_getmethods__["hi"] = _chips_c.pair_hi_get
    if _newclass:hi = _swig_property(_chips_c.pair_hi_get, _chips_c.pair_hi_set)
    __swig_setmethods__["lo"] = _chips_c.pair_lo_set
    __swig_getmethods__["lo"] = _chips_c.pair_lo_get
    if _newclass:lo = _swig_property(_chips_c.pair_lo_get, _chips_c.pair_lo_set)
    def __init__(self): 
        this = _chips_c.new_pair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chips_c.delete_pair
    __del__ = lambda self : None;
pair_swigregister = _chips_c.pair_swigregister
pair_swigregister(pair)


def add(*args):
  return _chips_c.add(*args)
add = _chips_c.add

def subtract(*args):
  return _chips_c.subtract(*args)
subtract = _chips_c.subtract

def shift_left(*args):
  return _chips_c.shift_left(*args)
shift_left = _chips_c.shift_left

def shift_right(*args):
  return _chips_c.shift_right(*args)
shift_right = _chips_c.shift_right

def unsigned_shift_right(*args):
  return _chips_c.unsigned_shift_right(*args)
unsigned_shift_right = _chips_c.unsigned_shift_right

def greater(*args):
  return _chips_c.greater(*args)
greater = _chips_c.greater

def greater_equal(*args):
  return _chips_c.greater_equal(*args)
greater_equal = _chips_c.greater_equal

def unsigned_greater(*args):
  return _chips_c.unsigned_greater(*args)
unsigned_greater = _chips_c.unsigned_greater

def unsigned_greater_equal(*args):
  return _chips_c.unsigned_greater_equal(*args)
unsigned_greater_equal = _chips_c.unsigned_greater_equal

def unsigned_divide(*args):
  return _chips_c.unsigned_divide(*args)
unsigned_divide = _chips_c.unsigned_divide

def divide(*args):
  return _chips_c.divide(*args)
divide = _chips_c.divide

def unsigned_modulo(*args):
  return _chips_c.unsigned_modulo(*args)
unsigned_modulo = _chips_c.unsigned_modulo

def modulo(*args):
  return _chips_c.modulo(*args)
modulo = _chips_c.modulo

def unsigned_long_divide(*args):
  return _chips_c.unsigned_long_divide(*args)
unsigned_long_divide = _chips_c.unsigned_long_divide

def long_divide(*args):
  return _chips_c.long_divide(*args)
long_divide = _chips_c.long_divide

def unsigned_long_modulo(*args):
  return _chips_c.unsigned_long_modulo(*args)
unsigned_long_modulo = _chips_c.unsigned_long_modulo

def long_modulo(*args):
  return _chips_c.long_modulo(*args)
long_modulo = _chips_c.long_modulo

def join_words(*args):
  return _chips_c.join_words(*args)
join_words = _chips_c.join_words

def high_word(*args):
  return _chips_c.high_word(*args)
high_word = _chips_c.high_word

def low_word(*args):
  return _chips_c.low_word(*args)
low_word = _chips_c.low_word

def float_to_bits(*args):
  return _chips_c.float_to_bits(*args)
float_to_bits = _chips_c.float_to_bits

def bits_to_float(*args):
  return _chips_c.bits_to_float(*args)
bits_to_float = _chips_c.bits_to_float

def double_to_bits(*args):
  return _chips_c.double_to_bits(*args)
double_to_bits = _chips_c.double_to_bits

def bits_to_double(*args):
  return _chips_c.bits_to_double(*args)
bits_to_double = _chips_c.bits_to_double
# This file is compatible with both classic and new-style classes.


